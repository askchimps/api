generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  SUPER_ADMIN
  OWNER
  ADMIN
  USER
}

enum CREDITS_PLAN {
  CONVERSATION
  MESSAGE
}

enum CONVERSATION_TYPE {
  CHAT
  CALL
}

model User {
  id             String   @id
  name           String
  email          String   @unique
  phone_number   String?  @unique
  is_super_admin Int      @default(0)
  is_disabled    Int      @default(0)
  is_deleted     Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  user_organisations UserOrganisation[]
}

model Organisation {
  id                               Int          @id @default(autoincrement())
  name                             String
  slug                             String       @unique
  conversation_credits             Float        @default(0)
  message_credits                  Float        @default(0)
  call_credits                     Float        @default(0)
  credits_plan                     CREDITS_PLAN @default(CONVERSATION)
  is_disabled                      Int          @default(0)
  is_deleted                       Int          @default(0)
  created_at                       DateTime     @default(now())
  updated_at                       DateTime     @default(now()) @updatedAt
  updated_by_user                  String
  active_indian_calls              Int          @default(0)
  active_international_calls       Int          @default(0)
  available_indian_channels        Int          @default(1)
  available_international_channels Int          @default(1)

  user_organisations UserOrganisation[]
  agents             Agent[]
  conversations      Conversation[]
  messages           Message[]
  leads              Lead[]
}

model UserOrganisation {
  id              Int      @id @default(autoincrement())
  user_id         String
  organisation_id Int
  role            ROLE     @default(USER)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
}

model Agent {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String   @unique
  phone_number    String?  @unique
  organisation_id Int
  base_prompt     String   @db.Text
  image_url       String?
  initial_prompt  String?  @db.Text
  analysis_prompt String?  @db.Text
  is_disabled     Int      @default(0)
  is_deleted      Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
  updated_by_user String

  organisation  Organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  conversations Conversation[]
  messages      Message[]
  leads         Lead[]
}

model Lead {
  id              Int       @id @default(autoincrement())
  organisation_id Int
  zoho_id         String?   @unique
  name            String?
  email           String?
  phone_number    String?   @unique
  source          String?
  status          String?
  is_indian       Int       @default(0)
  additional_info Json?
  logs            Json?
  follow_ups      Int       @default(0)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt
  next_follow_up  DateTime?
  in_process      Int       @default(0)

  organisation  Organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  agents        Agent[]
  conversations Conversation[]
}

model Conversation {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  type              CONVERSATION_TYPE @default(CHAT)
  organisation_id   Int
  agent_id          Int
  source            String
  lead_id           Int?
  summary           String?           @db.Text
  analysis          String?           @db.Text
  recording_url     String?           @db.Text
  call_ended_reason String?
  duration          Float?
  prompt_tokens     Int               @default(0)
  completion_tokens Int               @default(0)
  is_disabled       Int               @default(0)
  is_deleted        Int               @default(0)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now()) @updatedAt

  organisation Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  agent        Agent        @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  messages     Message[]
  lead         Lead?        @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  topics       Topic[]

  @@index([organisation_id, created_at])
  @@index([organisation_id, agent_id, created_at])
}

model Message {
  id                Int      @id @default(autoincrement())
  organisation_id   Int
  agent_id          Int
  conversation_id   Int
  role              String
  content           String
  prompt_tokens     Int      @default(0)
  completion_tokens Int      @default(0)
  is_disabled       Int      @default(0)
  is_deleted        Int      @default(0)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  agent        Agent        @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)

  @@index([organisation_id, created_at, role])
  @@index([organisation_id, agent_id, created_at, role])
}

model Topic {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  is_disabled Int      @default(0)
  is_deleted  Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  conversations Conversation[]
}
